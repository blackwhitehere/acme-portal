name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  # Run comprehensive tests including VS Code integration before release
  pre-release-tests:
    name: Pre-Release Testing (Full Suite)
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        node-version: ['18.x', '20.x']
        vscode-version: [stable, insiders]
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linter
      run: npm run lint
      
    - name: Check for unused dependencies
      run: npm run knip
      
    - name: Compile TypeScript
      run: npm run compile
      
    - name: Run unit tests
      run: npm run test:unit
      
    - name: Run VS Code integration tests (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: xvfb-run -a node scripts/test.js
      env:
        VSCODE_TEST_VERSION: ${{ matrix.vscode-version }}
      
    - name: Run VS Code integration tests (Windows/macOS)
      if: matrix.os != 'ubuntu-latest'
      run: node scripts/test.js
      env:
        VSCODE_TEST_VERSION: ${{ matrix.vscode-version }}
      
    - name: Package extension
      run: npm run vscode:prepublish
      
    - name: Verify package
      run: npm run package-check

  publish:
    name: Publish Release
    needs: pre-release-tests
    runs-on: ubuntu-latest
    environment: release-extension
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build and package
      run: npm run vscode:prepublish
      
    - name: Create package
      run: npm run package-check
      
    - name: Extract release notes
      id: extract_notes
      run: |
        echo "Extracting release notes from CHANGELOG.md..."
        # Extract version from git tag (remove 'v' prefix)
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "Version: $VERSION"
        
        # Try to extract notes for specific version, fallback to unreleased section
        RELEASE_NOTES=$(node scripts/extract-release-notes.js "$VERSION" 2>/dev/null || node scripts/extract-release-notes.js)
        
        # Save to file and environment variable for GitHub Actions
        echo "$RELEASE_NOTES" > release-notes.txt
        
        # Set output for use in release creation
        echo "release_notes<<EOF" >> $GITHUB_OUTPUT
        echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "Release notes extracted successfully"
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref }}
        name: Release ${{ github.ref }}
        body: ${{ steps.extract_notes.outputs.release_notes }}
        files: acmeportal-*.vsix
        draft: false
        prerelease: false
        
    - name: Publish to VS Code Marketplace
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      run: |
        if [ -z "${{ secrets.VSCE_PAT }}" ]; then
          echo "‚ö†Ô∏è  VSCE_PAT secret not configured - skipping marketplace publishing"
          echo "To enable marketplace publishing, configure VSCE_PAT secret in repository settings"
          exit 0
        else
          echo "üöÄ Publishing to VS Code Marketplace..."
          npx vsce publish --pat ${{ secrets.VSCE_PAT }}
        fi
