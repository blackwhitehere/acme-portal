# Continuous Integration Pipeline for VS Code Extension
#
# This workflow provides separated testing strategy to address VS Code download issues:
# - basic-tests: Runs linting, compilation, unit tests, and packaging (no VS Code required)
# - integration-tests: Runs VS Code integration tests (only on manual trigger or releases)
#
# Features:
# - Fast basic tests on every PR/push (Node 20.x, stable VS Code config only per issue #40)
# - Optional full platform testing via workflow_dispatch
# - Integration tests only when explicitly needed (manual trigger, releases)
# - Handles firewall restrictions preventing update.code.visualstudio.com downloads
#
# Usage:
# - Automatically triggered on PR/push events (basic tests only)
# - Use workflow_dispatch with 'run-integration-tests: true' for VS Code integration tests
# - Use workflow_dispatch with 'full-test: true' for cross-platform testing
#
# For more information: https://code.visualstudio.com/api/working-with-extensions/continuous-integration

name: CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      run-integration-tests:
        description: 'Run VS Code integration tests (requires network access to update.code.visualstudio.com)'
        required: false
        default: false
        type: boolean
      full-test:
        description: 'Run tests on all platforms (Linux, Windows, macOS) - applies to integration tests only'
        required: false
        default: false
        type: boolean

jobs:
  # Basic tests that run on every PR/push - no VS Code installation required
  basic-tests:
    name: Basic Tests (Lint, Compile, Unit Tests, Package)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linter
      run: npm run lint
      
    - name: Check for unused dependencies
      run: npm run knip
      
    - name: Check release notes format
      run: npm run check-release-notes
      
    - name: Compile TypeScript
      run: npm run compile
      
    - name: Run unit tests (no VS Code required)
      run: npm run test:unit
      
    - name: Package extension
      run: npm run vscode:prepublish
      
    - name: Validate package integrity
      run: npm run package-check

  # Integration tests that require VS Code installation - only run when explicitly requested
  integration-tests:
    name: VS Code Integration Tests
    # Only run integration tests when explicitly requested
    if: ${{ inputs.run-integration-tests == true }}
    strategy:
      matrix:
        # Simplified matrix per issue #40: default to Ubuntu + Node 20.x + stable VS Code
        # Full test only when explicitly requested via workflow_dispatch
        os: ${{ inputs.full-test && fromJSON('["ubuntu-latest", "windows-latest", "macos-latest"]') || fromJSON('["ubuntu-latest"]') }}
        node-version: ['20.x']  # Simplified to Node 20.x only per issue #40
        vscode-version: ['stable']  # Simplified to stable only per issue #40
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Compile TypeScript
      run: npm run compile
      
    - name: Run VS Code integration tests (Linux)
      if: runner.os == 'Linux'
      run: xvfb-run -a npm run test:integration
      env:
        VSCODE_TEST_VERSION: ${{ matrix.vscode-version }}
      
    - name: Run VS Code integration tests (Windows/macOS)
      if: runner.os != 'Linux'
      run: npm run test:integration
      env:
        VSCODE_TEST_VERSION: ${{ matrix.vscode-version }}

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate

  docs-build:
    name: Documentation Build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
        
    - name: Install MkDocs and dependencies
      run: |
        pip install mkdocs-material
        
    - name: Validate documentation build
      run: mkdocs build --strict